<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="e0707124-b407-49f3-8b15-facde6b36269" name="Default Changelist" comment="Generics Functions in Kotlin&#10;-----------------------------------">
      <change afterPath="$PROJECT_DIR$/src/generices/Aquarium.kt" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/generices/Buildings/Buildings.kt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/out/production/Basics/META-INF/Basics.kotlin_module" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Basics/META-INF/Basics.kotlin_module" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/generices/Aquarium.kt">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="248">
              <caret line="18" column="30" selection-start-line="18" selection-start-column="19" selection-end-line="18" selection-end-column="30" />
              <folding>
                <element signature="n#!!block;n#TapWater#0" />
                <element signature="n#!!block;n#LakeWater#0" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/generices/Buildings/Buildings.kt">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="100">
              <caret line="4" column="25" lean-forward="true" selection-start-line="4" selection-start-column="25" selection-end-line="4" selection-end-column="25" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
        <option value="Kotlin Class" />
        <option value="Kotlin File" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>\n</find>
      <find>+</find>
    </findStrings>
    <replaceStrings>
      <replace />
      <replace />
      <replace>,</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/HourOfDay.kt" />
        <option value="$PROJECT_DIR$/src/AMS.kt" />
        <option value="$APPLICATION_CONFIG_DIR$/idea.exe.vmoptions" />
        <option value="$PROJECT_DIR$/src/lesson_2/HourOfDay.kt" />
        <option value="$PROJECT_DIR$/src/FilterExample.kt" />
        <option value="$PROJECT_DIR$/src/filters/FilterExample.kt" />
        <option value="$PROJECT_DIR$/src/lambdas/Lambdaas.kt" />
        <option value="$PROJECT_DIR$/src/classes/Aquarium.java" />
        <option value="$PROJECT_DIR$/src/classes/Auarium.kt" />
        <option value="$PROJECT_DIR$/src/classes/SimpleSpice.kt" />
        <option value="$PROJECT_DIR$/src/classes/Aquarium.kt" />
        <option value="$PROJECT_DIR$/src/classes/Book.kt" />
        <option value="$PROJECT_DIR$/src/inheritance/Book.kt" />
        <option value="$PROJECT_DIR$/src/interfaces/AquariumFish.kt" />
        <option value="$PROJECT_DIR$/src/interfaces/main.kt" />
        <option value="$PROJECT_DIR$/src/interfaces/Main2.kt" />
        <option value="$PROJECT_DIR$/src/Spices/Spices.kt" />
        <option value="$PROJECT_DIR$/src/dataclasses/DataClass.kt" />
        <option value="$PROJECT_DIR$/src/spices/Spices.kt" />
        <option value="$PROJECT_DIR$/src/classes/Main.kt" />
        <option value="$PROJECT_DIR$/src/classes/Spice.kt" />
        <option value="$PROJECT_DIR$/src/specialpurposeclasses/SpecialPurposeClasses.kt" />
        <option value="$PROJECT_DIR$/src/kotlinEssentials/CollectionsInKotlin.kt" />
        <option value="$PROJECT_DIR$/src/kotlinEssentials/Pairs.kt" />
        <option value="$PROJECT_DIR$/src/generices/Aquarium.kt" />
        <option value="$PROJECT_DIR$/src/generices/Buildings/Buildings/Buildings.kt" />
        <option value="$PROJECT_DIR$/src/generices/Buildings/Buildings.kt" />
      </list>
    </option>
  </component>
  <component name="MavenProjectNavigator">
    <treeState>
      <expand />
      <select />
    </treeState>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="10" />
    <option name="y" value="20" />
    <option name="width" value="1346" />
    <option name="height" value="688" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Basics" type="b2602c69:ProjectViewProjectNode" />
              <item name="Basics" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Basics" type="b2602c69:ProjectViewProjectNode" />
              <item name="Basics" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Basics" type="b2602c69:ProjectViewProjectNode" />
              <item name="Basics" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="generices" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Basics" type="b2602c69:ProjectViewProjectNode" />
              <item name="Basics" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="generices" type="462c0819:PsiDirectoryNode" />
              <item name="Buildings" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\shoaibmohdkhan\IdeaProjects\Basics\src\inheritance" />
      <recent name="C:\Users\shoaibmohdkhan\IdeaProjects\Basics\src\filters" />
      <recent name="C:\Users\shoaibmohdkhan\IdeaProjects\Basics\src\lesson_2" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Kotlin.generices.Buildings.BuildingsKt">
    <configuration name="classes.MainKt" type="JetRunConfigurationType" factoryName="Kotlin" temporary="true" nameIsGenerated="true">
      <module name="Basics" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="MAIN_CLASS_NAME" value="classes.MainKt" />
      <option name="WORKING_DIRECTORY" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="generices.AquariumKt" type="JetRunConfigurationType" factoryName="Kotlin" temporary="true" nameIsGenerated="true">
      <module name="Basics" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="MAIN_CLASS_NAME" value="generices.AquariumKt" />
      <option name="WORKING_DIRECTORY" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="generices.Buildings.BuildingsKt" type="JetRunConfigurationType" factoryName="Kotlin" temporary="true" nameIsGenerated="true">
      <module name="Basics" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="MAIN_CLASS_NAME" value="generices.Buildings.BuildingsKt" />
      <option name="WORKING_DIRECTORY" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="kotlinEssentials.CollectionsInKotlinKt" type="JetRunConfigurationType" factoryName="Kotlin" temporary="true" nameIsGenerated="true">
      <module name="Basics" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="MAIN_CLASS_NAME" value="kotlinEssentials.CollectionsInKotlinKt" />
      <option name="WORKING_DIRECTORY" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="kotlinEssentials.PairsKt" type="JetRunConfigurationType" factoryName="Kotlin" temporary="true" nameIsGenerated="true">
      <module name="Basics" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="MAIN_CLASS_NAME" value="kotlinEssentials.PairsKt" />
      <option name="WORKING_DIRECTORY" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Kotlin.classes.MainKt" />
      <item itemvalue="Kotlin.kotlinEssentials.PairsKt" />
      <item itemvalue="Kotlin.kotlinEssentials.CollectionsInKotlinKt" />
      <item itemvalue="Kotlin.generices.AquariumKt" />
      <item itemvalue="Kotlin.generices.Buildings.BuildingsKt" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Kotlin.generices.Buildings.BuildingsKt" />
        <item itemvalue="Kotlin.generices.AquariumKt" />
        <item itemvalue="Kotlin.kotlinEssentials.PairsKt" />
        <item itemvalue="Kotlin.kotlinEssentials.CollectionsInKotlinKt" />
        <item itemvalue="Kotlin.classes.MainKt" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="e0707124-b407-49f3-8b15-facde6b36269" name="Default Changelist" comment="" />
      <created>1559884410705</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1559884410705</updated>
    </task>
    <task id="LOCAL-00001" summary="Filters in Kotlin&#10;------------------------&#10;- Filter can filter a list.&#10;- Filters are of eagar and lazy type&#10;- Filters can create whole duplicate list&#10;- asSequence is just opposite(they not create duplicate list )">
      <created>1559967854214</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1559967854214</updated>
    </task>
    <task id="LOCAL-00002" summary="Lambda in Kotlin&#10;------------------------&#10;To define a lambda, we need to stick to the syntax:&#10;&#10;val lambdaName : Type = { argumentList -&gt; codeBody }&#10;&#10;Type Inference&#10;Kotlin’s type inference allows the type of a lambda to be evaluated by the compiler.&#10;&#10;Writing a lambda that produces the square of a number would be as written as:&#10;&#10;val square = { number: Int -&gt; number * number }&#10;val nine = square(3)&#10;&#10;Kotlin will evaluate the above example to be a function that takes one Int and returns an Int: (Int) -&gt; Int&#10;&#10;If we wanted to create a lambda that multiplies its single argument numbers by 100 then returns that value as a String:&#10;&#10;val magnitude100String = { input : Int -&gt;&#10;    val magnitude = input * 100&#10;    magnitude.toString()&#10;}&#10;&#10;Kotlin will understand that this lambda is of type (Int) -&gt; String.&#10;&#10;Type Declaration&#10;Occasionally Kotlin can’t infer our types and we must explicitly declare the type for our lambda; just as we can with any other type.&#10;&#10;The pattern is input -&gt; output, however, if the code returns no value we use the type Unit:&#10;&#10;val that : Int -&gt; Int = { three -&gt; three }&#10;val more : (String, Int) -&gt; String = { str, int -&gt; str + int }&#10;val noReturn : Int -&gt; Unit = { num -&gt; println(num) }">
      <created>1559973602726</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1559973602726</updated>
    </task>
    <task id="LOCAL-00003" summary="Classes in Kotlin&#10;------------------------&#10;- Access can be public,private,protected,internal&#10;- public visible to all &#10;- private visible to file or(class in which it written)&#10;- protected visible to file and sub classes&#10;- internal visible to module(if compile in library then it will not visible to other classes)">
      <created>1559984474137</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1559984474137</updated>
    </task>
    <task id="LOCAL-00004" summary="Classes in Kotlin&#10;------------------------&#10;Constructor in Class&#10;&#10;- class can have constructor &#10;   - ClassName(var Height: Int = 20)&#10;   - constructor with Default values&#10;   - no need to reassign value as we do in java&#10;     example&#10;        ClassName(int height)&#10;        {   this.height = height&#10;          }&#10;&#10;- constructor with different value Or &#10;     constructor(numberOfFish: Int) : this() {&#10;             val water: Int = numberOfFish * 2000 &#10;             val tank: Double = water + water * 0.1&#10;             height =(tank/ (length* width)).toInt()&#10;     &#10;        }">
      <created>1559986116664</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1559986116664</updated>
    </task>
    <task id="LOCAL-00005" summary="Classes in Kotlin&#10;------------------------&#10;Constructor in Class&#10;&#10;- class can have constructor &#10;   - ClassName(var Height: Int = 20)&#10;   - constructor with Default values&#10;   - no need to reassign value as we do in java&#10;     example&#10;        ClassName(int height)&#10;        {   this.height = height&#10;          }&#10;&#10;- constructor (also called Secondary constructor)with different value Or &#10;     constructor(numberOfFish: Int) : this() {&#10;             val water: Int = numberOfFish * 2000 &#10;             val tank: Double = water + water * 0.1&#10;             height =(tank/ (length* width)).toInt()&#10;     &#10;        }">
      <created>1559988145234</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1559988145234</updated>
    </task>
    <task id="LOCAL-00006" summary="Inheritance in Kotlin&#10;------------------------&#10;- classes with &quot;open&quot; modifier is inheritable&#10;- syntax to inheritance&#10;    class eBook(title :String):Book(title){}&#10;- for overriding declaration of function use &quot;open&quot;&#10;    1- open fun readPage(){....} // must have&#10;    2- override fun readPage(){...} // overriding here">
      <created>1559989736233</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1559989736233</updated>
    </task>
    <task id="LOCAL-00007" summary="Interface in Kotlin&#10;------------------------&#10;- Interface Vs abstract class&#10;   -- Difference&#10;   - abstract classes can have &quot;constructor&quot; &#10;   - Interface can not have &quot;constructor&quot;&#10;   &#10;   -- Similarity&#10;   - Both can have implementation of &quot;Methods&quot;">
      <created>1559992111731</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1559992111731</updated>
    </task>
    <task id="LOCAL-00008" summary="Interface in Kotlin&#10;------------------------&#10;- Interface Vs abstract class&#10;   -- Difference&#10;   - abstract classes can have &quot;constructor&quot; &#10;   - Interface can not have &quot;constructor&quot;&#10;   &#10;   -- Similarity&#10;   - Both can have implementation of &quot;Methods&quot;&#10;   &#10;- object keyword is used for creating single object&#10;  like singleton pattern in java&#10;     &#10;     object GoldenColor : FishColor2 {&#10;         override val color: String&#10;             get() = &quot;Gold&quot;&#10;     }">
      <created>1559993665892</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1559993665892</updated>
    </task>
    <task id="LOCAL-00009" summary="Interface in Kotlin&#10;------------------------&#10;- Interface Vs abstract class&#10;   -- Difference&#10;   - abstract classes can have &quot;constructor&quot; &#10;   - Interface can not have &quot;constructor&quot;&#10;   &#10;   -- Similarity&#10;   - Both can have implementation of &quot;Methods&quot;&#10;   &#10;- object keyword is used for creating single object&#10;  like singleton pattern in java&#10;     &#10;     object GoldenColor : FishColor2 {&#10;         override val color: String&#10;             get() = &quot;Gold&quot;&#10;     }">
      <created>1560047268932</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1560047268932</updated>
    </task>
    <task id="LOCAL-00010" summary="Interface in Kotlin&#10;------------------------&#10;- Interface Vs abstract class&#10;   -- Difference&#10;   - abstract classes can have &quot;constructor&quot; &#10;   - Interface can not have &quot;constructor&quot;&#10;   &#10;   -- Similarity&#10;   - Both can have implementation of &quot;Methods&quot;&#10;   &#10;- object keyword is used for creating single object&#10;  like singleton pattern in java&#10;     &#10;     object GoldenColor : FishColor2 {&#10;         override val color: String&#10;             get() = &quot;Gold&quot;&#10;     }">
      <created>1560047298057</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1560047298057</updated>
    </task>
    <task id="LOCAL-00011" summary="Data Class in Kotlin&#10;------------------------&#10;We creates classes that purpose is hold &quot;Data&quot;&#10;In Kotlin these classes are called data classes.&#10;&#10;- declare by &quot;data&quot; keywords&#10;     Ex: data class User(val name: String, val age: Int)&#10;     &#10;- The compiler automatically derives the following members &#10;  from all properties declared in the primary constructor:&#10;    - equals()/hashCode() pair;&#10;    - toString() of the form &quot;User(name=John, age=42)&quot;;&#10;    - componentN() functions corresponding to the properties &#10;      in their order of declaration;&#10;    - copy() function (see below).&#10;     &#10;- To ensure consistency and meaningful behavior of the generated code,&#10;  data classes have to fulfill the following requirements:&#10;   - The primary constructor needs to have at least one parameter;&#10;   - All primary constructor parameters need to be marked as &#10;     &quot;val&quot; or &quot;var&quot;;&#10;   - Data classes cannot be abstract, open, sealed or inner;&#10;   - Data classes may only implement interfaces.">
      <created>1560050225813</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1560050225813</updated>
    </task>
    <task id="LOCAL-00012" summary="Special purpose classes in Kotlin&#10;-----------------------------------&#10;- &quot;Object&quot; create only one instance(object)&#10;- &quot;enum&quot; create only one instance(object) and &#10;   one object of property(i.e RED,BLUE,GREEN) also&#10;   you can not add more property to it(u can not modified it).&#10;- &quot;sealed&quot; classes allow sub classes in only where &quot;sealed&quot; &#10;   class is declared">
      <created>1560053496797</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1560053496797</updated>
    </task>
    <task id="LOCAL-00013" summary="Pairs &amp; Triple in Kotlin&#10;-----------------------------------&#10;&#10; &#10;Pair &amp; Triple is used to store or return two &amp; three values &#10;respectively of same or different data types. &#10;There can or cannot be any relation between both the values. &#10;They can be of the same or different data types.&#10;&#10;And how do I use it?&#10;_____________________________&#10;&#10;Initialise it as a simple Pair class object by &#10;passing two values to the constructor.&#10;    Ex-&#10;        Pair (&quot;Hello&quot;, &quot;How are you&quot;)&#10;        Pair (&quot;First&quot;, 1)&#10;        Pair (10, null)&#10;        Pair (1.5, listOf(null))&#10;        var variable1 = &quot;I am a String&quot;&#10;        var variable2 = 10&#10;            &#10;        Pair (variable1, variable2)&#10;&#10;And how do I retrieve the values?&#10;______________________________________&#10;&#10;Either receive them in a single variable and &#10;use first and second properties or componentN &#10;method to extract the values, or receive in separate &#10;variables and use them directly.&#10;&#10;    Ex&#10;        var pair = Pair(&quot;Hello&quot;, &quot;How are you&quot;)&#10;        println(pair.first)&#10;        println(pair.second)&#10;        &#10;        println(pair.component1())&#10;        println(pair.component2())&#10;        //or&#10;        var (firstName, lastName) = Pair(&quot;Hasan&quot;, &quot;Khan&quot;)&#10;        println(firstName)&#10;        println(lastName)&#10;&#10;- We can even use a normal method like toString() on this object.&#10;    EX- &#10;         val pair = Pair(&quot;I am a String&quot;, listOf(1,2,3))&#10;         print(pair.toString())&#10;&#10;- We can even convert a Pair object to a list using toList().&#10;    Ex-&#10;        val pair = Pair(&quot;I am a String&quot;, 10)&#10;        val list = pair.toList()&#10;        println(list[0])&#10;        println(list.get(1))">
      <created>1560137218535</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1560137218535</updated>
    </task>
    <task id="LOCAL-00014" summary="Extension Functions in Kotlin&#10;-----------------------------------&#10;- To declare an extension function, we need to prefix its &#10;  name with a receiver type, i.e. the type being extended.&#10;  The following adds a swap function to MutableList&lt;Int&gt;:&#10;&#10;    fun MutableList&lt;Int&gt;.swap(index1: Int, index2: Int) &#10;    {&#10;        val tmp = this[index1] // 'this' corresponds to the list&#10;        this[index1] = this[index2]&#10;        this[index2] = tmp&#10;    }&#10;    &#10;- The this keyword inside an extension function corresponds&#10;  to the receiver object (the one that is passed before the dot).&#10;  Now, we can call such a function on any MutableList&lt;Int&gt;:&#10;&#10;    val l = mutableListOf(1, 2, 3)&#10;    l.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'&#10;    val l = mutableListOf(1, 2, 3)&#10;    l.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'&#10;&#10;Nullable Receiver&#10;__________________&#10;&#10;- Note that extensions can be defined with a nullable receiver type.&#10;  Such extensions can be called on an object variable even if its &#10;  value is null, and can check for this == null inside the body. &#10;  This is what allows you to call toString() in Kotlin without &#10;  checking for null: the check happens inside the extension function.&#10;&#10;    fun Any?.toString(): String {&#10;        if (this == null) return &quot;null&quot;&#10;        // after the null check, 'this' is auto cast to a &#10;        // non-null type, so the toString() below&#10;        // resolves to the member function of the Any class&#10;        return toString()&#10;    }">
      <created>1560155943617</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1560155943617</updated>
    </task>
    <option name="localTasksCounter" value="15" />
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1382" height="744" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.06051437" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.3289689" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.5090016" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" weight="0.65139115" />
      <window_info anchor="bottom" id="Version Control" order="8" weight="0.3289689" />
      <window_info anchor="bottom" id="Messages" order="9" weight="0.63175124" />
      <window_info anchor="bottom" id="Event Log" order="10" side_tool="true" weight="0.32733223" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Maven" order="1" weight="0.329296" />
      <window_info anchor="right" id="Key Promoter X" order="2" weight="0.329296" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="3" weight="0.25" />
      <window_info anchor="right" id="Palette" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="Capture Analysis" order="6" />
      <window_info anchor="right" id="Palette&#9;" order="7" />
      <window_info anchor="right" id="Ant Build" order="8" weight="0.24962178" />
    </layout>
    <layout-to-restore>
      <window_info id="Image Layers" order="0" />
      <window_info id="Designer" order="1" />
      <window_info id="UI Designer" order="2" />
      <window_info id="Capture Tool" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info active="true" content_ui="combo" id="Project" order="5" visible="true" weight="0.13313162" />
      <window_info id="Structure" order="6" side_tool="true" weight="0.25" />
      <window_info anchor="bottom" id="Version Control" order="0" />
      <window_info anchor="bottom" id="Terminal" order="1" />
      <window_info anchor="bottom" id="Event Log" order="2" side_tool="true" />
      <window_info anchor="bottom" id="Messages" order="3" weight="0.3289689" />
      <window_info anchor="bottom" id="Message" order="4" />
      <window_info anchor="bottom" id="Find" order="5" />
      <window_info anchor="bottom" id="Run" order="6" weight="0.78723407" />
      <window_info anchor="bottom" id="Debug" order="7" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="8" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="9" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="10" />
      <window_info anchor="right" id="Palette" order="0" />
      <window_info anchor="right" id="Capture Analysis" order="1" />
      <window_info anchor="right" id="Theme Preview" order="2" />
      <window_info anchor="right" id="Palette&#9;" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="5" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="6" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="7" weight="0.25" />
    </layout-to-restore>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT" value="true" />
    <MESSAGE value="Filters in Kotlin&#10;------------------------&#10;- Filter can filter a list.&#10;- Filters are of eagar and lazy type&#10;- Filters can create whole duplicate list&#10;- asSequence is just opposite(they not create duplicate list )" />
    <MESSAGE value="Lambda in Kotlin&#10;------------------------&#10;To define a lambda, we need to stick to the syntax:&#10;&#10;val lambdaName : Type = { argumentList -&gt; codeBody }&#10;&#10;Type Inference&#10;Kotlin’s type inference allows the type of a lambda to be evaluated by the compiler.&#10;&#10;Writing a lambda that produces the square of a number would be as written as:&#10;&#10;val square = { number: Int -&gt; number * number }&#10;val nine = square(3)&#10;&#10;Kotlin will evaluate the above example to be a function that takes one Int and returns an Int: (Int) -&gt; Int&#10;&#10;If we wanted to create a lambda that multiplies its single argument numbers by 100 then returns that value as a String:&#10;&#10;val magnitude100String = { input : Int -&gt;&#10;    val magnitude = input * 100&#10;    magnitude.toString()&#10;}&#10;&#10;Kotlin will understand that this lambda is of type (Int) -&gt; String.&#10;&#10;Type Declaration&#10;Occasionally Kotlin can’t infer our types and we must explicitly declare the type for our lambda; just as we can with any other type.&#10;&#10;The pattern is input -&gt; output, however, if the code returns no value we use the type Unit:&#10;&#10;val that : Int -&gt; Int = { three -&gt; three }&#10;val more : (String, Int) -&gt; String = { str, int -&gt; str + int }&#10;val noReturn : Int -&gt; Unit = { num -&gt; println(num) }" />
    <MESSAGE value="Classes in Kotlin&#10;------------------------&#10;- Access can be public,private,protected,internal&#10;- public visible to all &#10;- private visible to file or(class in which it written)&#10;- protected visible to file and sub classes&#10;- internal visible to module(if compile in library then it will not visible to other classes)" />
    <MESSAGE value="Classes in Kotlin&#10;------------------------&#10;Constructor in Class&#10;&#10;- class can have constructor &#10;   - ClassName(var Height: Int = 20)&#10;   - constructor with Default values&#10;   - no need to reassign value as we do in java&#10;     example&#10;        ClassName(int height)&#10;        {   this.height = height&#10;          }&#10;&#10;- constructor with different value Or &#10;     constructor(numberOfFish: Int) : this() {&#10;             val water: Int = numberOfFish * 2000 &#10;             val tank: Double = water + water * 0.1&#10;             height =(tank/ (length* width)).toInt()&#10;     &#10;        }" />
    <MESSAGE value="Classes in Kotlin&#10;------------------------&#10;Constructor in Class&#10;&#10;- class can have constructor &#10;   - ClassName(var Height: Int = 20)&#10;   - constructor with Default values&#10;   - no need to reassign value as we do in java&#10;     example&#10;        ClassName(int height)&#10;        {   this.height = height&#10;          }&#10;&#10;- constructor (also called Secondary constructor)with different value Or &#10;     constructor(numberOfFish: Int) : this() {&#10;             val water: Int = numberOfFish * 2000 &#10;             val tank: Double = water + water * 0.1&#10;             height =(tank/ (length* width)).toInt()&#10;     &#10;        }" />
    <MESSAGE value="Inheritance in Kotlin&#10;------------------------&#10;- classes with &quot;open&quot; modifier is inheritable&#10;- syntax to inheritance&#10;    class eBook(title :String):Book(title){}&#10;- for overriding declaration of function use &quot;open&quot;&#10;    1- open fun readPage(){....} // must have&#10;    2- override fun readPage(){...} // overriding here" />
    <MESSAGE value="Interface in Kotlin&#10;------------------------&#10;- Interface Vs abstract class&#10;   -- Difference&#10;   - abstract classes can have &quot;constructor&quot; &#10;   - Interface can not have &quot;constructor&quot;&#10;   &#10;   -- Similarity&#10;   - Both can have implementation of &quot;Methods&quot;" />
    <MESSAGE value="Interface in Kotlin&#10;------------------------&#10;- Interface Vs abstract class&#10;   -- Difference&#10;   - abstract classes can have &quot;constructor&quot; &#10;   - Interface can not have &quot;constructor&quot;&#10;   &#10;   -- Similarity&#10;   - Both can have implementation of &quot;Methods&quot;&#10;   &#10;- object keyword is used for creating single object&#10;  like singleton pattern in java&#10;     &#10;     object GoldenColor : FishColor2 {&#10;         override val color: String&#10;             get() = &quot;Gold&quot;&#10;     }" />
    <MESSAGE value="Data Class in Kotlin&#10;------------------------&#10;We creates classes that purpose is hold &quot;Data&quot;&#10;In Kotlin these classes are called data classes.&#10;&#10;- declare by &quot;data&quot; keywords&#10;     Ex: data class User(val name: String, val age: Int)&#10;     &#10;- The compiler automatically derives the following members &#10;  from all properties declared in the primary constructor:&#10;    - equals()/hashCode() pair;&#10;    - toString() of the form &quot;User(name=John, age=42)&quot;;&#10;    - componentN() functions corresponding to the properties &#10;      in their order of declaration;&#10;    - copy() function (see below).&#10;     &#10;- To ensure consistency and meaningful behavior of the generated code,&#10;  data classes have to fulfill the following requirements:&#10;   - The primary constructor needs to have at least one parameter;&#10;   - All primary constructor parameters need to be marked as &#10;     &quot;val&quot; or &quot;var&quot;;&#10;   - Data classes cannot be abstract, open, sealed or inner;&#10;   - Data classes may only implement interfaces." />
    <MESSAGE value="Special purpose classes in Kotlin&#10;-----------------------------------&#10;- &quot;Object&quot; create only one instance(object)&#10;- &quot;enum&quot; create only one instance(object) and &#10;   one object of property(i.e RED,BLUE,GREEN) also&#10;   you can not add more property to it(u can not modified it).&#10;- &quot;sealed&quot; classes allow sub classes in only where &quot;sealed&quot; &#10;   class is declared" />
    <MESSAGE value="Pairs &amp; Triple in Kotlin&#10;-----------------------------------&#10;&#10; &#10;Pair &amp; Triple is used to store or return two &amp; three values &#10;respectively of same or different data types. &#10;There can or cannot be any relation between both the values. &#10;They can be of the same or different data types.&#10;&#10;And how do I use it?&#10;_____________________________&#10;&#10;Initialise it as a simple Pair class object by &#10;passing two values to the constructor.&#10;    Ex-&#10;        Pair (&quot;Hello&quot;, &quot;How are you&quot;)&#10;        Pair (&quot;First&quot;, 1)&#10;        Pair (10, null)&#10;        Pair (1.5, listOf(null))&#10;        var variable1 = &quot;I am a String&quot;&#10;        var variable2 = 10&#10;            &#10;        Pair (variable1, variable2)&#10;&#10;And how do I retrieve the values?&#10;______________________________________&#10;&#10;Either receive them in a single variable and &#10;use first and second properties or componentN &#10;method to extract the values, or receive in separate &#10;variables and use them directly.&#10;&#10;    Ex&#10;        var pair = Pair(&quot;Hello&quot;, &quot;How are you&quot;)&#10;        println(pair.first)&#10;        println(pair.second)&#10;        &#10;        println(pair.component1())&#10;        println(pair.component2())&#10;        //or&#10;        var (firstName, lastName) = Pair(&quot;Hasan&quot;, &quot;Khan&quot;)&#10;        println(firstName)&#10;        println(lastName)&#10;&#10;- We can even use a normal method like toString() on this object.&#10;    EX- &#10;         val pair = Pair(&quot;I am a String&quot;, listOf(1,2,3))&#10;         print(pair.toString())&#10;&#10;- We can even convert a Pair object to a list using toList().&#10;    Ex-&#10;        val pair = Pair(&quot;I am a String&quot;, 10)&#10;        val list = pair.toList()&#10;        println(list[0])&#10;        println(list.get(1))" />
    <MESSAGE value="Extension Functions in Kotlin&#10;-----------------------------------&#10;- To declare an extension function, we need to prefix its &#10;  name with a receiver type, i.e. the type being extended.&#10;  The following adds a swap function to MutableList&lt;Int&gt;:&#10;&#10;    fun MutableList&lt;Int&gt;.swap(index1: Int, index2: Int) &#10;    {&#10;        val tmp = this[index1] // 'this' corresponds to the list&#10;        this[index1] = this[index2]&#10;        this[index2] = tmp&#10;    }&#10;    &#10;- The this keyword inside an extension function corresponds&#10;  to the receiver object (the one that is passed before the dot).&#10;  Now, we can call such a function on any MutableList&lt;Int&gt;:&#10;&#10;    val l = mutableListOf(1, 2, 3)&#10;    l.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'&#10;    val l = mutableListOf(1, 2, 3)&#10;    l.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'&#10;&#10;Nullable Receiver&#10;__________________&#10;&#10;- Note that extensions can be defined with a nullable receiver type.&#10;  Such extensions can be called on an object variable even if its &#10;  value is null, and can check for this == null inside the body. &#10;  This is what allows you to call toString() in Kotlin without &#10;  checking for null: the check happens inside the extension function.&#10;&#10;    fun Any?.toString(): String {&#10;        if (this == null) return &quot;null&quot;&#10;        // after the null check, 'this' is auto cast to a &#10;        // non-null type, so the toString() below&#10;        // resolves to the member function of the Any class&#10;        return toString()&#10;    }" />
    <option name="LAST_COMMIT_MESSAGE" value="Extension Functions in Kotlin&#10;-----------------------------------&#10;- To declare an extension function, we need to prefix its &#10;  name with a receiver type, i.e. the type being extended.&#10;  The following adds a swap function to MutableList&lt;Int&gt;:&#10;&#10;    fun MutableList&lt;Int&gt;.swap(index1: Int, index2: Int) &#10;    {&#10;        val tmp = this[index1] // 'this' corresponds to the list&#10;        this[index1] = this[index2]&#10;        this[index2] = tmp&#10;    }&#10;    &#10;- The this keyword inside an extension function corresponds&#10;  to the receiver object (the one that is passed before the dot).&#10;  Now, we can call such a function on any MutableList&lt;Int&gt;:&#10;&#10;    val l = mutableListOf(1, 2, 3)&#10;    l.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'&#10;    val l = mutableListOf(1, 2, 3)&#10;    l.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'&#10;&#10;Nullable Receiver&#10;__________________&#10;&#10;- Note that extensions can be defined with a nullable receiver type.&#10;  Such extensions can be called on an object variable even if its &#10;  value is null, and can check for this == null inside the body. &#10;  This is what allows you to call toString() in Kotlin without &#10;  checking for null: the check happens inside the extension function.&#10;&#10;    fun Any?.toString(): String {&#10;        if (this == null) return &quot;null&quot;&#10;        // after the null check, 'this' is auto cast to a &#10;        // non-null type, so the toString() below&#10;        // resolves to the member function of the Any class&#10;        return toString()&#10;    }" />
    <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REARRANGE_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="antWorkspaceConfiguration">
    <option name="IS_AUTOSCROLL_TO_SOURCE" value="false" />
    <option name="FILTER_TARGETS" value="false" />
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://C:/Program Files/Java/jdk1.8.0_211/src.zip!/java/lang/Integer.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="7">
          <caret line="579" column="48" selection-start-line="579" selection-start-column="48" selection-end-line="579" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$KOTLIN_BUNDLED$/lib/kotlin-stdlib.jar!/kotlin/collections/collections.kotlin_builtins">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="25">
          <caret line="27" column="26" selection-start-line="27" selection-start-column="26" selection-end-line="27" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$APPLICATION_CONFIG_DIR$/idea.exe.vmoptions">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="300">
          <caret line="12" lean-forward="true" selection-start-line="12" selection-end-line="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/lesson_2/HourOfDay.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="575">
          <caret line="23" selection-start-line="23" selection-end-line="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/filters/FilterExample.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="374">
          <caret line="42" column="1" selection-start-line="42" selection-start-column="1" selection-end-line="42" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/classes/Aquarium.java" />
    <entry file="file://$PROJECT_DIR$/src/lambdas/Lambdaas.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="161">
          <caret line="9" lean-forward="true" selection-start-line="9" selection-end-line="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/classes/SimpleSpice.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="18">
          <caret line="7" column="14" lean-forward="true" selection-start-line="7" selection-start-column="14" selection-end-line="7" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/inheritance/Book.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="413">
          <caret line="26" column="1" selection-start-line="26" selection-start-column="1" selection-end-line="26" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/classes/Aquarium.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="75">
          <caret line="3" selection-start-line="3" selection-end-line="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/interfaces/main.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="300">
          <caret line="12" column="1" lean-forward="true" selection-start-line="12" selection-start-column="1" selection-end-line="12" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/interfaces/AquariumFish.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="188">
          <caret line="13" column="25" selection-start-line="13" selection-start-column="25" selection-end-line="13" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/interfaces/Main2.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="175">
          <caret line="7" column="12" selection-start-line="7" selection-start-column="4" selection-end-line="7" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/AMS.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="275">
          <caret line="11" column="27" selection-start-line="11" selection-start-column="27" selection-end-line="11" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/dataclasses/DataClass.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="263">
          <caret line="30" selection-start-line="30" selection-end-line="30" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/spices/Spices.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1275">
          <caret line="51" column="1" selection-start-line="51" selection-start-column="1" selection-end-line="51" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/classes/Main.kt">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/classes/Spice.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="475">
          <caret line="19" column="17" selection-start-line="19" selection-start-column="17" selection-end-line="19" selection-end-column="17" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/specialpurposeclasses/SpecialPurposeClasses.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="353">
          <caret line="41" column="23" selection-start-line="41" selection-start-column="22" selection-end-line="41" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$KOTLIN_BUNDLED$/lib/kotlin-stdlib-sources.jar!/kotlin/String.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="195">
          <caret line="22" column="13" selection-start-line="22" selection-start-column="13" selection-end-line="22" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/kotlinEssentials/Pairs.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="358">
          <caret line="56" lean-forward="true" selection-start-line="56" selection-end-line="56" />
          <folding>
            <element signature="n#!!block;n#Books#0" />
            <element signature="n#!!block;n#getWeight#0" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/kotlinEssentials/CollectionsInKotlin.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="313">
          <caret line="49" selection-start-line="49" selection-end-line="49" />
          <folding>
            <element signature="n#!!block;n#Book#0" />
            <element signature="n#!!block;n#canBorrow#0;n#!!block;n#Book#0" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/generices/Buildings/Buildings.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="100">
          <caret line="4" column="25" lean-forward="true" selection-start-line="4" selection-start-column="25" selection-end-line="4" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/generices/Aquarium.kt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="248">
          <caret line="18" column="30" selection-start-line="18" selection-start-column="19" selection-end-line="18" selection-end-column="30" />
          <folding>
            <element signature="n#!!block;n#TapWater#0" />
            <element signature="n#!!block;n#LakeWater#0" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
</project>